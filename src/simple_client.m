nfblab_options;
try
    nfblab_options_additional; % additional options that overwritte the options above
catch
end
import java.io.*; % for TCP/IP
import java.net.*; % for TCP/IP

connectionSocket  = Socket(InetAddress.getByName("localhost"), TCPport );
fprintf('Trying to connect...\n');
outToServer = PrintWriter(connectionSocket.getOutputStream(), true);
inFromServer = BufferedReader(InputStreamReader(connectionSocket.getInputStream()));
tic;

%% 8 Channel Unit
%% Channels: ['fz', 'cz', 'pz', 'p3', 'p4', 'f3', 'f4', 'c4']
%% Protocol: 4-8 Stop, C4-Pz
json_single_stop = [ '{"command":"","options":{"ntlfreqprocess":{' ...
'	"file_template": "single_stop",' ...
'	"ch_1_placement": "c4",' ...
'	"ch_1_index": 8,' ...
'	"ref_1_placement": "pz",' ...
'	"ref_1_index": 3,' ...
'	"go_1_low": null,' ...
'	"go_1_high": null,' ...
'	"go_2_low": null,' ...
'	"go_2_high": null,' ...
'	"stop_1_low": 4,' ...
'	"stop_1_high": 8,' ...
'	"stop_2_low": null,' ...
'	"stop_2_high": null' ...
'}}}' ];
jsondecode(json_single_stop);

% 8 Channel Unit
% Channels: ['fz', 'cz', 'pz', 'p3', 'p4', 'f3', 'f4', 'c4']
% Protocol: 4-8 Go, C4-Pz
json_single_go = [ '{"command":"","options":{"ntlfreqprocess":{' ...
'	"file_template": "single_go",' ...
'	"ch_1_placement": "c4",' ...
'	"ch_1_index": 8,' ...
'	"ref_1_placement": "pz",' ...
'	"ref_1_index": 3,' ...
'	"go_1_low": 4, ' ...
'	"go_1_high": 8, ' ...
'	"go_2_low": null, ' ...
'	"go_2_high": null, ' ...
'	"stop_1_low": null,' ...
'	"stop_1_high": null,' ...
'	"stop_2_low": null, ' ...
'	"stop_2_high": null' ...
'}}}' ];
jsondecode(json_single_go);

% 8 Channel Unit
% Channels: ['fz', 'cz', 'pz', 'p3', 'p4', 'f3', 'f4', 'c4']
% Protocol: 4-8 + 12-32 Go, C4-Cz
json_double_go = [ '{"command":"","options":{"ntlfreqprocess":{' ...
'	"file_template": "double_go",' ...
'	"ch_1_placement": "c4",' ...
'	"ch_1_index": 8,' ...
'	"ref_1_placement": "cz",' ...
'	"ref_1_index": 2,' ...
'	"go_1_low": 4, ' ...
'	"go_1_high": 8, ' ...
'	"go_2_low": 12, ' ...
'	"go_2_high": 32, ' ...
'	"stop_1_low": null,' ...
'	"stop_1_high": null,' ...
'	"stop_2_low": null, ' ...
'	"stop_2_high": null' ...
'}}}' ];
jsondecode(json_double_go);

% 8 Channel Unit
% Channels: ['fz', 'cz', 'pz', 'p3', 'p4', 'f3', 'f4', 'c4']
% Protocol: 4-8 + 12-32 Stop, C4-Cz
json_double_stop = ['{"command":"","options":{"ntlfreqprocess":{' ...
'	"file_template": "double_stop",' ...
'	"ch_1_placement": "c4",' ...
'	"ch_1_index": 8,' ...
'	"ref_1_placement": "cz",' ...
'	"ref_1_index": 2,' ...
'	"go_1_low": null, ' ...
'	"go_1_high": null, ' ...
'	"go_2_low": null, ' ...
'	"go_2_high": null, ' ...
'	"stop_1_low": 4,' ...
'	"stop_1_high": 8,' ...
'	"stop_2_low": 12, ' ...
'	"stop_2_high": 32 ' ...
'}}}' ];
jsondecode(json_double_stop);

% 8 Channel Unit
% Channels: ['fz', 'cz', 'pz', 'p3', 'p4', 'f3', 'f4', 'c4']
% Protocol: 2-4 Go, 4-8 + 12-32 Stop, C4-Cz
json_single_go_double_stop = [ '{"command":"","options":{"ntlfreqprocess":{' ...
'	"file_template": "single_go_double_stop",' ...
'	"ch_1_placement": "c4",' ...
'	"ch_1_index": 8,' ...
'	"ref_1_placement": "cz",' ...
'	"ref_1_index": 2,' ...
'	"go_1_low": 2,' ...
'	"go_1_high": 4,' ...
'	"go_2_low": null,' ... 
'	"go_2_high": null,' ... 
'	"stop_1_low": 4,' ...
'	"stop_1_high": 8,' ...
'	"stop_2_low": 12, ' ...
'	"stop_2_high": 32 ' ...
'}}}'; ];
jsondecode(json_single_go_double_stop);

% messages
fileNameAsr = sprintf('asr_filter_client_%s.mat',  datestr(now, 'yyyy-mm-dd_HH-MM'));
msg = [];
msg(end+1).command = 'lslconnect';
msg(end).options.lslname = '';
msg(end).options.lsltype = 'EEG';

msg(end+1).command = 'start';
msg(end).options.runmode = 'baseline';

msg(end).options.fileNameAsr = fileNameAsr;
msg(end+sessionDuration).command = 'stop';
msg(end).options.addfreqprocess.SMR = '@(x)(x(10,7)/(x(10,6)+x(10,6)+0.001))';

msg(end+1).command = 'start';
msg(end).options.runmode = 'trial';
msg(end+sessionDuration).command = 'stop';

msg(end+1).command = 'start';
msg(end).options.runmode = 'trial';
msg(end+sessionDuration).command = 'stop';
msg(end+1).command = 'quit';

iMsg = 1;

% special msg
if 1
    modifiedSentence = inFromServer.readLine();
    outToServer.println(json_single_stop);
    pause(0.1);
    modifiedSentence = inFromServer.readLine();
    outToServer.println(json_single_go);
    pause(0.1);
    modifiedSentence = inFromServer.readLine();
    outToServer.println(json_double_go);
    pause(0.1);
    modifiedSentence = inFromServer.readLine();
    outToServer.println(json_double_stop);
    pause(0.1);
    modifiedSentence = inFromServer.readLine();
    outToServer.println(json_single_go_double_stop);
    pause(0.1);
end
while iMsg <= length(msg)
    % get message and print
    modifiedSentence = inFromServer.readLine();
    disp(modifiedSentence);
    
    % send message and pause
    outToServer.println(jsonencode(msg(iMsg)));
    iMsg = iMsg + 1;
    pause(0.1);
end

% while toc < 10
%     modifiedSentence = inFromServer.readLine();
%     outToServer.println('hello');
%     disp(modifiedSentence);
% end
pause(1);

connectionSocket.close()
